/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Defines the permissions policies for the board.
 */
export declare class BoardPermissionsPolicy {
    /**
     * Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.
     */
    'collaborationToolsStartAccess'?: string | (typeof BoardPermissionsPolicy.CollaborationToolsStartAccessEnum)[keyof typeof BoardPermissionsPolicy.CollaborationToolsStartAccessEnum];
    /**
     * Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.
     */
    'copyAccess'?: string | (typeof BoardPermissionsPolicy.CopyAccessEnum)[keyof typeof BoardPermissionsPolicy.CopyAccessEnum];
    /**
     * Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.
     */
    'sharingAccess'?: string | (typeof BoardPermissionsPolicy.SharingAccessEnum)[keyof typeof BoardPermissionsPolicy.SharingAccessEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace BoardPermissionsPolicy {
    const CollaborationToolsStartAccessEnum: {
        readonly AllEditors: "all_editors";
        readonly BoardOwnersAndCoowners: "board_owners_and_coowners";
    };
    const CopyAccessEnum: {
        readonly Anyone: "anyone";
        readonly TeamMembers: "team_members";
        readonly TeamEditors: "team_editors";
        readonly BoardOwner: "board_owner";
    };
    const SharingAccessEnum: {
        readonly TeamMembersWithEditingRights: "team_members_with_editing_rights";
        readonly OwnerAndCoowners: "owner_and_coowners";
    };
}
