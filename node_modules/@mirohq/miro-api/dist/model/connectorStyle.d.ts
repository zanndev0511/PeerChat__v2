/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * @internal
 * Contains information about the style of a connector, such as the color or caption font size
 */
export declare class ConnectorStyle {
    /**
     * Hex value representing the color for the captions on the connector. Default: `#1a1a1a`
     */
    'color'?: string;
    /**
     * The decoration cap of the connector end, like an arrow or circle. Default: stealth.
     */
    'endStrokeCap'?: string | (typeof ConnectorStyle.EndStrokeCapEnum)[keyof typeof ConnectorStyle.EndStrokeCapEnum];
    /**
     * Defines the font size, in dp, for the captions on the connector. Default: 14
     */
    'fontSize'?: string;
    /**
     * The decoration cap of the connector end, like an arrow or circle. Default: none.
     */
    'startStrokeCap'?: string | (typeof ConnectorStyle.StartStrokeCapEnum)[keyof typeof ConnectorStyle.StartStrokeCapEnum];
    /**
     * Hex value of the color of the connector line. Default: #000000.
     */
    'strokeColor'?: string;
    /**
     * The stroke pattern of the connector line. Default: normal.
     */
    'strokeStyle'?: string | (typeof ConnectorStyle.StrokeStyleEnum)[keyof typeof ConnectorStyle.StrokeStyleEnum];
    /**
     * The thickness of the connector line, in dp. Default: 1.0.
     */
    'strokeWidth'?: string;
    /**
     * The captions orientation relatively to the connector line curvature. Default: aligned.
     */
    'textOrientation'?: string | (typeof ConnectorStyle.TextOrientationEnum)[keyof typeof ConnectorStyle.TextOrientationEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ConnectorStyle {
    const EndStrokeCapEnum: {
        readonly None: "none";
        readonly Stealth: "stealth";
        readonly Diamond: "diamond";
        readonly DiamondFilled: "diamond_filled";
        readonly Oval: "oval";
        readonly OvalFilled: "oval_filled";
        readonly Arrow: "arrow";
        readonly Triangle: "triangle";
        readonly TriangleFilled: "triangle_filled";
        readonly ErdOne: "erd_one";
        readonly ErdMany: "erd_many";
        readonly ErdOnlyOne: "erd_only_one";
        readonly ErdZeroOrOne: "erd_zero_or_one";
        readonly ErdOneOrMany: "erd_one_or_many";
        readonly ErdZeroOrMany: "erd_zero_or_many";
    };
    const StartStrokeCapEnum: {
        readonly None: "none";
        readonly Stealth: "stealth";
        readonly Diamond: "diamond";
        readonly DiamondFilled: "diamond_filled";
        readonly Oval: "oval";
        readonly OvalFilled: "oval_filled";
        readonly Arrow: "arrow";
        readonly Triangle: "triangle";
        readonly TriangleFilled: "triangle_filled";
        readonly ErdOne: "erd_one";
        readonly ErdMany: "erd_many";
        readonly ErdOnlyOne: "erd_only_one";
        readonly ErdZeroOrOne: "erd_zero_or_one";
        readonly ErdOneOrMany: "erd_one_or_many";
        readonly ErdZeroOrMany: "erd_zero_or_many";
    };
    const StrokeStyleEnum: {
        readonly Normal: "normal";
        readonly Dotted: "dotted";
        readonly Dashed: "dashed";
    };
    const TextOrientationEnum: {
        readonly Horizontal: "horizontal";
        readonly Aligned: "aligned";
    };
}
