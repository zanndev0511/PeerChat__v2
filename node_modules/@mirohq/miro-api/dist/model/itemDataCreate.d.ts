/**
 * Miro API
 * Miro API
 *
 * The version of the OpenAPI document: 0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CustomField } from './customField';
/**
 * @internal
 * Contains data information applicable for each item type.
 */
export declare class ItemDataCreate {
    /**
     * A short text description to add context about the card.
     */
    'description'?: string;
    /**
     * Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view.
     */
    'fields'?: Array<CustomField>;
    /**
     * Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.
     */
    'status'?: string | (typeof ItemDataCreate.StatusEnum)[keyof typeof ItemDataCreate.StatusEnum];
    /**
     * A short text header to identify the image.
     */
    'title'?: string;
    /**
     * Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing  numbers, and it is automatically assigned to a user when they first sign up.
     */
    'assigneeId'?: string;
    /**
     * The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
     */
    'dueDate'?: Date;
    /**
     * URL of the image.
     */
    'url': string;
    /**
     * Defines how the content in the embed item is displayed on the board. `inline`: The embedded content is displayed directly on the board. `modal`: The embedded content is displayed inside a modal overlay on the board.
     */
    'mode'?: string | (typeof ItemDataCreate.ModeEnum)[keyof typeof ItemDataCreate.ModeEnum];
    /**
     * URL of the image to be used as the preview image for the embedded item.
     */
    'previewUrl'?: string;
    /**
     * The actual text (content) that appears in the text item.
     */
    'content': string;
    /**
     * Defines the geometric shape of the sticky note and aspect ratio for its dimensions.
     */
    'shape'?: string | (typeof ItemDataCreate.ShapeEnum)[keyof typeof ItemDataCreate.ShapeEnum];
    /** @ignore */
    static discriminator: string | undefined;
    /** @ignore */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /** @ignore */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace ItemDataCreate {
    const StatusEnum: {
        readonly Disconnected: "disconnected";
        readonly Connected: "connected";
        readonly Disabled: "disabled";
    };
    const ModeEnum: {
        readonly Inline: "inline";
        readonly Modal: "modal";
    };
    const ShapeEnum: {
        readonly Square: "square";
        readonly Rectangle: "rectangle";
    };
}
