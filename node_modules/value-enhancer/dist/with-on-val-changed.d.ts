import type { ReadonlyVal } from "./readonly-val";
import type { ValDisposer, ValSubscriber } from "./typings";
declare type ValueFromVal<V> = V extends ReadonlyVal<infer TValue> ? TValue : never;
declare type MetaFromVal<V> = V extends ReadonlyVal<infer _TValue, infer TMeta> ? TMeta : never;
export declare type WithOnValChanged<TConfig, TEnhancedResult> = TEnhancedResult & {
    onValChanged: <K extends Extract<keyof TConfig, string> = Extract<keyof TConfig, string>>(key: K, listener: ValSubscriber<ValueFromVal<TEnhancedResult[Extract<`_${K}$`, keyof TEnhancedResult>]>, MetaFromVal<TEnhancedResult[Extract<`_${K}$`, keyof TEnhancedResult>]>>) => ValDisposer;
};
export declare function withOnValChanged<TInstance>(instance: TInstance): void;
export {};
