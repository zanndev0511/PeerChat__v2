import type { ExtractValValue } from "./combine";
import type { ReadonlyVal } from "./readonly-val";
import type { ValManager } from "./val-manager";
import type { WithOnValChanged } from "./with-on-val-changed";
declare type IntersectionFromUnion<TUnion> = (TUnion extends any ? (arg: TUnion) => void : never) extends (arg: infer TArg) => void ? TArg : never;
declare type ExtractReadonlyValKeys<TInstance, TKey = keyof TInstance> = TKey extends Extract<keyof TInstance, string> ? TInstance[TKey] extends ReadonlyVal ? TKey : never : never;
export declare type ReadonlyValEnhancedProps<TVal, TKey extends string> = Readonly<Record<TKey, ExtractValValue<TVal>> & Record<`_${TKey}$`, TVal>>;
export declare type ReadonlyValEnhancerConfig = Record<string, ReadonlyVal>;
declare type ToReadonlyValUnion<TConfig, TKey = ExtractReadonlyValKeys<TConfig>> = TKey extends ExtractReadonlyValKeys<TConfig> ? ReadonlyValEnhancedProps<TConfig[TKey], TKey> : never;
export declare type ReadonlyValEnhancedResult<TConfig> = WithOnValChanged<TConfig, IntersectionFromUnion<ToReadonlyValUnion<TConfig>>>;
/**
 * Bind ReadonlyVals/Vals `value` and itself to properties of an instance.
 *
 * @example
 * ```ts
 * import type { ReadonlyValEnhancedResult } from "value-enhancer";
 * import { Val, withReadonlyValueEnhancer } from "value-enhancer";
 *
 * type ReadonlyValConfig = {
 *   apple: Val<string>
 *   isApple: ReadonlyVal<boolean>
 * };
 *
 * interface Obj extends ReadonlyValEnhancedResult<ReadonlyValConfig> {}
 *
 * class Obj {
 *   constructor() {
 *     const apple$ = new Val("apple");
 *     const isApple$ = derive(apple$, (apple) => apple === "apple");
 *
 *     withReadonlyValueEnhancer(this, {
 *       apple: apple$,
 *       isApple: isApple$,
 *     })
 *   }
 * }
 * ```
 *
 * `const obj = new Obj()` results in:
 * - `obj.apple`, a getter that returns `apple$.value`
 * - `obj._apple$`, the `apple$`
 * - `obj.isApple`, a getter that returns `isApple$.value`
 * - `obj._isApple$`, the `isApple$`
 * - `obj.onValChanged(key: "apple" | "isApple", listener)`, equals to calling <code>obj[\`_${key}$\`].reaction</code>
 */
export declare function withReadonlyValueEnhancer<TInstance extends ReadonlyValEnhancedResult<TConfig>, TConfig extends ReadonlyValEnhancerConfig>(instance: TInstance, config: TConfig, valManager?: ValManager): void;
export {};
