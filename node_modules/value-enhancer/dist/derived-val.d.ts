import { ReadonlyVal } from "./readonly-val";
import type { ValConfig, ValTransform } from "./typings";
export declare class DerivedVal<TSrcValue = any, TValue = any, TMeta = any> extends ReadonlyVal<TValue, TMeta> {
    constructor(val: ReadonlyVal<TSrcValue>, transform: ValTransform<TSrcValue, TValue>, config?: ValConfig<TValue, TMeta>);
    get value(): TValue;
    private _srcValue;
}
export declare function derive<TSrcValue = any, TValue = any, TMeta = any>(val: ReadonlyVal<TSrcValue>): ReadonlyVal<TValue, TMeta>;
export declare function derive<TSrcValue = any, TValue = any, TMeta = any>(val: ReadonlyVal<TSrcValue>, transform: ValTransform<TSrcValue, TValue>, config?: ValConfig<TValue, TMeta>): ReadonlyVal<TValue, TMeta>;
