import type { ValDisposer, ValSubscriber, ValConfig } from "./typings";
export declare class ReadonlyVal<TValue = any, TMeta = any> {
    private _subscribers;
    protected _value: TValue;
    protected _setValue(value: TValue, meta?: TMeta): void;
    constructor(value: TValue, config?: ValConfig<TValue, TMeta>);
    get value(): TValue;
    /**
     * Subscribe to value changes without immediate emission.
     */
    reaction(subscriber: ValSubscriber<TValue, TMeta>): ValDisposer;
    /**
     * Subscribe to value changes with immediate emission.
     * @param subscriber
     * @param meta Meta for the immediate emission
     */
    subscribe(subscriber: ValSubscriber<TValue, TMeta>, meta?: TMeta): ValDisposer;
    destroy(): void;
    unsubscribe<T extends (...args: any[]) => any>(subscriber: T): void;
    get size(): number;
    /**
     * Compare two values. Default `===`.
     */
    compare(newValue: TValue, oldValue: TValue): boolean;
}
