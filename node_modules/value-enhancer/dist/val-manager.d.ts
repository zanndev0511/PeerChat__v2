import type { ReadonlyVal } from "./readonly-val";
/**
 * Manage life-cycles of a list of Vals (e.g. auto cleanup).
 *
 * @example
 * ```ts
 * const valManager = new ValManager();
 * const val1 = valManager.attach(new Val("12345"));
 * const val2 = valManager.attach(new Val(""));
 *
 * valManager.destroy(); // val1.destroy() and val2.destroy() are called
 * ```
 */
export declare class ValManager {
    readonly vals: Set<ReadonlyVal<any, any>>;
    /** Attach a val to manager */
    attach<V extends ReadonlyVal>(val: V): V;
    /** Detach a val from manager */
    detach<V extends ReadonlyVal>(val: V): V;
    destroy(): void;
}
