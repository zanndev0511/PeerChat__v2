import type { ReadonlyVal } from "value-enhancer";
import type { InvisiblePlugin } from "white-web-sdk";
import type { Diff } from "./typings";
import type { RemitterDisposer, RemitterEventNames, RemitterListener } from "remitter";
export declare const STORAGE_NS = "_WM-StOrAgE_";
export declare const MAIN_STORAGE = "_WM-MaIn-StOrAgE_";
export interface StorageEventData<TState> {
    stateChanged: Diff<TState>;
    disconnected: void;
}
export interface StorageConfig<TState = any> {
    namespace?: string;
    plugin$: ReadonlyVal<InvisiblePlugin<any> | null>;
    isWritable$: ReadonlyVal<boolean>;
    defaultState?: TState;
}
export declare class Storage<TState extends Record<string, any> = any> {
    readonly namespace: string;
    defaultState: Readonly<TState>;
    private _plugin$;
    private _isWritable$;
    private _refine;
    private _sideEffect;
    private _events;
    constructor({ plugin$, isWritable$, namespace, defaultState, }: StorageConfig<TState>);
    get isWritable(): boolean;
    get state(): Readonly<TState>;
    setState(state: Partial<TState>): void;
    /** reset storage state to default state */
    resetState(): void;
    /** delete synced storage data and disconnect from synced storage */
    deleteStorage(): void;
    /**
     * Add a listener to the eventName.
     */
    on: <TEventName extends RemitterEventNames<StorageEventData<TState>>>(eventName: TEventName, listener: RemitterListener<StorageEventData<TState>, TEventName>) => RemitterDisposer;
    /**
     * Remove a listener from the eventName.
     */
    off: <TEventName extends RemitterEventNames<StorageEventData<TState>>>(eventName: TEventName, listener: RemitterListener<StorageEventData<TState>, TEventName>) => boolean;
    /** Disconnect from synced storage and release listeners */
    disconnect(): void;
    get disconnected(): boolean;
    private _disconnected;
    private _requireAccess;
}
