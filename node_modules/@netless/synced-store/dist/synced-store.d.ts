import type { ReadonlyVal } from "value-enhancer";
import type { MagixEventListenerOptions, Displayer, InvisiblePlugin } from "white-web-sdk";
import { Storage } from "./storage";
import type { MagixEventTypes, MagixEventHandler, MagixEventListenerDisposer } from "./typings";
export declare class SyncedStore<TEventData extends Record<string, any> = any> {
    readonly displayer: Displayer;
    readonly _plugin$: ReadonlyVal<InvisiblePlugin<any> | null>;
    private readonly _isPluginWritable$;
    private readonly _isRoomWritable$;
    private readonly _sideEffect;
    private readonly _room;
    constructor(displayer: Displayer, invisiblePlugin$: ReadonlyVal<InvisiblePlugin<any> | null>, isRoomWritable$: ReadonlyVal<boolean>);
    connectStorage<TState extends Record<string, unknown> = any>(namespace?: string, defaultState?: TState): Storage<TState>;
    get isPluginWritable(): boolean;
    addPluginWritableChangeListener(listener: (isWritable: boolean) => void): () => void;
    get isRoomWritable(): boolean;
    setRoomWritable(isWritable: boolean): Promise<void>;
    addRoomWritableChangeListener(listener: (isWritable: boolean) => void): () => void;
    /** Dispatch events to other clients (and self). */
    dispatchEvent<TEvent extends MagixEventTypes<TEventData> = MagixEventTypes<TEventData>>(event: TEvent, payload: TEventData[TEvent]): void;
    /** Listen to events from others clients (and self messages). */
    addEventListener<TEvent extends MagixEventTypes<TEventData> = MagixEventTypes<TEventData>>(event: TEvent, listener: MagixEventHandler<TEventData, TEvent>, options?: MagixEventListenerOptions | undefined): MagixEventListenerDisposer;
    /** Remove a Magix event listener. */
    removeEventListener<TEvent extends MagixEventTypes<TEventData> = MagixEventTypes<TEventData>>(event: TEvent, listener?: MagixEventHandler<TEventData, TEvent>): void;
    nextFrame(): Promise<void>;
    destroy(): void;
}
