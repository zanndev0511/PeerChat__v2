import "./style.scss";
import { SideEffectManager } from "side-effect-manager";
import { Val, ValEnhancedResult, ValSideEffectBinder } from "value-enhancer";
import { TeleTitleBar } from "../TeleTitleBar";
import type { TeleBoxConfig, TeleBoxRect, TeleBoxEvents, TeleBoxState, TeleBoxDelegateEvents, TeleBoxCoord, TeleBoxSize, TeleBoxColorScheme } from "./typings";
export * from "./constants";
export * from "./typings";
declare type ValConfig = {
    prefersColorScheme: Val<TeleBoxColorScheme, boolean>;
    darkMode: Val<boolean, boolean>;
    containerRect: Val<TeleBoxRect, boolean>;
    collectorRect: Val<TeleBoxRect | undefined, boolean>;
    /** Box title. Default empty. */
    title: Val<string, boolean>;
    /** Is box visible */
    visible: Val<boolean, boolean>;
    /** Is box readonly */
    readonly: Val<boolean, boolean>;
    /** Able to resize box window */
    resizable: Val<boolean, boolean>;
    /** Able to drag box window */
    draggable: Val<boolean, boolean>;
    /** Restrict box to always be within the containing area. */
    fence: Val<boolean, boolean>;
    /** Fixed width/height ratio for box window. */
    fixRatio: Val<boolean, boolean>;
    focus: Val<boolean, boolean>;
    zIndex: Val<number, boolean>;
    /** Is box minimized. Default false. */
    minimized: Val<boolean, boolean>;
    /** Is box maximized. Default false. */
    maximized: Val<boolean, boolean>;
    $userContent: Val<HTMLElement | undefined>;
    $userFooter: Val<HTMLElement | undefined>;
    $userStyles: Val<HTMLStyleElement | undefined>;
};
export interface TeleBox extends ValEnhancedResult<ValConfig> {
}
export declare class TeleBox {
    constructor({ id, title, prefersColorScheme, darkMode, visible, width, height, minWidth, minHeight, x, y, minimized, maximized, readonly, resizable, draggable, fence, fixRatio, focus, zIndex, namespace, titleBar, content, footer, styles, containerRect, collectorRect, }?: TeleBoxConfig);
    readonly id: string;
    /** ClassName Prefix. For CSS styling. Default "telebox" */
    readonly namespace: string;
    readonly events: TeleBoxEvents;
    readonly _delegateEvents: TeleBoxDelegateEvents;
    protected _sideEffect: SideEffectManager;
    protected _valSideEffectBinder: ValSideEffectBinder;
    titleBar: TeleTitleBar;
    _minSize$: Val<TeleBoxSize, boolean>;
    _size$: Val<TeleBoxSize, boolean>;
    _intrinsicSize$: Val<TeleBoxSize, boolean>;
    _visualSize$: Val<TeleBoxSize, boolean>;
    _coord$: Val<TeleBoxCoord, boolean>;
    _intrinsicCoord$: Val<TeleBoxCoord, boolean>;
    get darkMode(): boolean;
    _state$: Val<TeleBoxState, boolean>;
    get state(): TeleBoxState;
    /** @deprecated use setMaximized and setMinimized instead */
    setState(state: TeleBoxState, skipUpdate?: boolean): this;
    /** Minimum box width relative to container element. 0~1. Default 0. */
    get minWidth(): number;
    /** Minimum box height relative to container element. 0~1. Default 0. */
    get minHeight(): number;
    /**
     * @param minWidth Minimum box width relative to container element. 0~1.
     * @returns this
     */
    setMinWidth(minWidth: number, skipUpdate?: boolean): this;
    /**
     * @param minHeight Minimum box height relative to container element. 0~1.
     * @returns this
     */
    setMinHeight(minHeight: number, skipUpdate?: boolean): this;
    /** Intrinsic box width relative to container element(without counting the effect of maximization or minimization). 0~1. Default 0.5. */
    get intrinsicWidth(): number;
    /** Intrinsic box height relative to container element(without counting the effect of maximization or minimization). 0~1. Default 0.5. */
    get intrinsicHeight(): number;
    /**
     * Resize box.
     * @param width Box width relative to container element. 0~1.
     * @param height Box height relative to container element. 0~1.
     * @param skipUpdate Skip emitting event.
     * @returns this
     */
    resize(width: number, height: number, skipUpdate?: boolean): this;
    /** Box width relative to container element. 0~1. Default 0.5. */
    get width(): number;
    /** Box height relative to container element. 0~1. Default 0.5. */
    get height(): number;
    /** Box width in pixels. */
    get absoluteWidth(): number;
    /** Box height in pixels. */
    get absoluteHeight(): number;
    /** Actual rendered box width relative to container element. 0~1. Default 0.5. */
    get visualWidth(): number;
    /** Actual rendered box height relative to container element. 0~1. Default 0.5. */
    get visualHeight(): number;
    /** Intrinsic box x position relative to container element(without counting the effect of maximization or minimization). 0~1. Default 0.1. */
    get intrinsicX(): number;
    /** Intrinsic box y position relative to container element(without counting the effect of maximization or minimization). 0~1. Default 0.1. */
    get intrinsicY(): number;
    /**
     * Move box position.
     * @param x x position relative to container element. 0~1.
     * @param y y position relative to container element. 0~1.
     * @param skipUpdate Skip emitting event.
     * @returns this
     */
    move(x: number, y: number, skipUpdate?: boolean): this;
    /** Box x position relative to container element. 0~1. Default 0.1. */
    get x(): number;
    /** Box y position relative to container element. 0~1. Default 0.1. */
    get y(): number;
    /**
     * Resize + Move, with respect to fixed ratio.
     * @param x x position relative to container element. 0~1.
     * @param y y position relative to container element. 0~1.
     * @param width Box width relative to container element. 0~1.
     * @param height Box height relative to container element. 0~1.
     * @param skipUpdate Skip emitting event.
     * @returns this
     */
    transform(x: number, y: number, width: number, height: number, skipUpdate?: boolean): this;
    /**
     * Mount box to a container element.
     */
    mount(container: HTMLElement): this;
    /**
     * Unmount box from the container element.
     */
    unmount(): this;
    /**
     * Mount dom to box content.
     */
    mountContent(content: HTMLElement): this;
    /**
     * Unmount content from the box.
     */
    unmountContent(): this;
    /**
     * Mount dom to box Footer.
     */
    mountFooter(footer: HTMLElement): this;
    /**
     * Unmount Footer from the box.
     */
    unmountFooter(): this;
    getUserStyles(): HTMLStyleElement | undefined;
    mountStyles(styles: string | HTMLStyleElement): this;
    unmountStyles(): this;
    /** DOM of the box */
    $box: HTMLElement;
    /** DOM of the box content */
    $content: HTMLElement;
    /** DOM of the box title bar */
    $titleBar: HTMLElement;
    /** DOM of the box footer */
    $footer: HTMLElement;
    protected _renderSideEffect: SideEffectManager;
    render(root?: HTMLElement): HTMLElement;
    protected _handleTrackStart?: (ev: MouseEvent | TouchEvent) => void;
    handleTrackStart: (ev: MouseEvent | TouchEvent) => void;
    protected _renderResizeHandlers(): void;
    destroy(): void;
    /**
     * Wrap a className with namespace
     */
    wrapClassName(className: string): string;
}
declare type PropKeys<K = keyof TeleBox> = K extends keyof TeleBox ? TeleBox[K] extends Function ? never : K : never;
export declare type ReadonlyTeleBox = Pick<TeleBox, PropKeys | "wrapClassName" | "mountContent" | "mountFooter" | "mountStyles" | "handleTrackStart">;
