import "./style.scss";
import { SideEffectManager } from "side-effect-manager";
import type { TeleBoxState } from "../../TeleBox/typings";
import type { TeleTitleBar, TeleTitleBarConfig, TeleTitleBarEvent } from "../typings";
export declare type DefaultTitleBarButton = TeleTitleBarEvent & {
    readonly iconClassName: string;
    readonly isActive?: (state: TeleBoxState) => boolean;
};
export interface DefaultTitleBarConfig extends TeleTitleBarConfig {
    buttons?: ReadonlyArray<DefaultTitleBarButton>;
}
export declare class DefaultTitleBar implements TeleTitleBar {
    constructor({ readonly, title, buttons, onEvent, onDragStart, namespace, state, }?: DefaultTitleBarConfig);
    readonly namespace: string;
    $titleBar: HTMLElement | undefined;
    $title: HTMLElement | undefined;
    $dragArea: HTMLElement;
    setTitle(title: string): void;
    setState(state: TeleBoxState): void;
    setReadonly(readonly: boolean): void;
    render(): HTMLElement;
    renderDragArea(): HTMLElement;
    dragHandle(): HTMLElement | undefined;
    wrapClassName(className: string): string;
    destroy(): void;
    onEvent?: TeleTitleBarConfig["onEvent"];
    onDragStart?: TeleTitleBarConfig["onDragStart"];
    protected readonly: boolean;
    protected title?: string;
    protected buttons: ReadonlyArray<DefaultTitleBarButton>;
    protected state: TeleBoxState;
    protected $btns: HTMLButtonElement[];
    protected sideEffect: SideEffectManager;
    protected lastTitleBarClick: {
        timestamp: number;
        clientX: number;
        clientY: number;
    };
    protected handleTitleBarClick: (ev: MouseEvent) => void;
    protected lastTitleBarTouch: {
        timestamp: number;
        clientX: number;
        clientY: number;
    };
    protected handleTitleBarTouch: (ev: TouchEvent) => void;
}
