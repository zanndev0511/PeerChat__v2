import "./style.scss";
import { TeleStyles } from "../typings";
export interface TeleBoxCollectorConfig {
    visible?: boolean;
    readonly?: boolean;
    darkMode?: boolean;
    namespace?: string;
    styles?: TeleStyles;
    onClick?: () => void;
}
export declare class TeleBoxCollector {
    constructor({ visible, readonly, darkMode, namespace, styles, onClick, }?: TeleBoxCollectorConfig);
    readonly styles: TeleStyles;
    readonly namespace: string;
    get visible(): boolean;
    get readonly(): boolean;
    get darkMode(): boolean;
    onClick: (() => void) | undefined;
    $collector: HTMLElement | undefined;
    /**
     * Mount collector to a root element.
     */
    mount(root: HTMLElement): this;
    /**
     * Unmount collector from the root element.
     */
    unmount(): this;
    setVisible(visible: boolean): this;
    setReadonly(readonly: boolean): this;
    setDarkMode(darkMode: boolean): this;
    setStyles(styles: TeleStyles): this;
    render(): HTMLElement;
    destroy(): void;
    wrapClassName(className: string): string;
    protected _visible: boolean;
    protected _readonly: boolean;
    protected _darkMode: boolean;
    protected handleCollectorClick: () => void;
}
