import type { ValCompare, ValDisposer, ValSubscriber, ValTransform, ValReactionSubscriber } from "./typings";
export declare class Val<TValue = any, TMeta = any> {
    protected _value: TValue;
    constructor(value: TValue, compare?: ValCompare<TValue>);
    get value(): TValue;
    setValue(value: TValue, meta?: TMeta): void;
    /**
     * Subscribe to value changes without immediate emission.
     */
    reaction(subscriber: ValReactionSubscriber<TValue, TMeta>): ValDisposer;
    /**
     * Subscribe to value changes with immediate emission.
     * @param subscriber
     * @param meta Meta for the immediate emission
     */
    subscribe(subscriber: ValSubscriber<TValue, TMeta>, meta?: TMeta): ValDisposer;
    derive<TDerivedValue = any>(transform: ValTransform<TValue, TDerivedValue, TMeta>, compare?: ValCompare<TDerivedValue>, meta?: TMeta): Val<TDerivedValue, TMeta>;
    destroy(): void;
    /**
     * Add a callback which will be run before destroy
     * @param beforeDestroy
     * @returns Cancel the callback
     */
    addBeforeDestroy(beforeDestroy: () => void): ValDisposer;
    /**
     * Compare two values. Default `===`.
     */
    compare(newValue: TValue, oldValue: TValue): boolean;
    protected _beforeDestroys?: Set<() => void>;
    protected _subscribers?: Set<ValSubscriber<TValue, TMeta> | ValReactionSubscriber<TValue, TMeta>>;
}
