export declare type AsyncSideEffectDisposer = () => Promise<void> | void;
export declare type AsyncSideEffectExecutor = () => Promise<AsyncSideEffectDisposer> | AsyncSideEffectDisposer;
export declare class AsyncSideEffectManager {
    /**
     * Add a side effect.
     * @param executor execute side effect
     * @param disposerID Optional id for the disposer
     * @returns disposerID
     */
    add(executor: AsyncSideEffectExecutor, disposerID?: string): string;
    private _add;
    /**
     * Remove but not run the disposer. Do nothing if not found.
     * @param disposerID
     */
    remove(disposerID: string): AsyncSideEffectDisposer | undefined;
    /**
     * Remove and run the disposer. Do nothing if not found.
     * @param disposerID
     */
    flush(disposerID: string): void;
    private _flush;
    /**
     * Remove and run all of the disposers.
     */
    flushAll(): void;
    /**
     * @returns a Promise resolved when current tasks are finished.
     */
    finished: Promise<void>;
    private _resolveFinished?;
    /**
     * All disposers. Use this only when you know what you are doing.
     */
    readonly disposers: Map<string, AsyncSideEffectDisposer>;
    private readonly _nextTask;
    private readonly _isRunning;
    private _startTask;
    private _endTask;
}
