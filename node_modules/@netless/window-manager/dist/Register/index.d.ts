import Emittery from "emittery";
import type { NetlessApp, RegisterEvents, RegisterParams } from "../typings";
export declare type LoadAppEvent = {
    kind: string;
    status: "start" | "success" | "failed";
    reason?: string;
};
export declare type SyncRegisterAppPayload = {
    kind: string;
    src: string;
    name: string | undefined;
};
export declare type SyncRegisterApp = (payload: SyncRegisterAppPayload) => void;
declare class AppRegister {
    kindEmitters: Map<string, Emittery<RegisterEvents>>;
    registered: Map<string, RegisterParams>;
    appClassesCache: Map<string, Promise<NetlessApp>>;
    appClasses: Map<string, () => Promise<NetlessApp>>;
    private syncRegisterApp;
    setSyncRegisterApp(fn: SyncRegisterApp): void;
    onSyncRegisterAppChange: (payload: SyncRegisterAppPayload) => void;
    register(params: RegisterParams): Promise<void>;
    unregister(kind: string): void;
    notifyApp<T extends keyof RegisterEvents>(kind: string, event: T, payload: RegisterEvents[T]): Promise<void>;
    private createKindEmitter;
}
export declare const appRegister: AppRegister;
export {};
