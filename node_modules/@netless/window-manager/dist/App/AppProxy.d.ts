import Emittery from "emittery";
import { AppContext } from "./AppContext";
import type { AppEmitterEvent, AppInitState, BaseInsertParams } from "../index";
import type { SceneState, View, SceneDefinition } from "white-web-sdk";
import type { AppManager } from "../AppManager";
import type { NetlessApp } from "../typings";
import type { ReadonlyTeleBox } from "@netless/telebox-insider";
import type { PageRemoveService, PageState } from "../Page";
export declare type AppEmitter = Emittery<AppEmitterEvent>;
export declare class AppProxy implements PageRemoveService {
    private params;
    private manager;
    kind: string;
    id: string;
    scenePath?: string;
    appEmitter: AppEmitter;
    scenes?: SceneDefinition[];
    private appListener;
    private boxManager;
    private appProxies;
    private viewManager;
    private store;
    isAddApp: boolean;
    private status;
    private stateKey;
    private _pageState;
    private _prevFullPath;
    appResult?: NetlessApp<any>;
    appContext?: AppContext<any, any>;
    constructor(params: BaseInsertParams, manager: AppManager, appId: string, isAddApp: boolean);
    private initScenes;
    get view(): View | undefined;
    get viewIndex(): number | undefined;
    get isWritable(): boolean;
    get attributes(): any;
    get appAttributes(): import("../index").AppSyncAttributes;
    getFullScenePath(): string | undefined;
    private getFullScenePathFromScenes;
    setFullPath(path: string): void;
    baseInsertApp(skipUpdate?: boolean): Promise<{
        appId: string;
        app: NetlessApp;
    }>;
    get box(): ReadonlyTeleBox | undefined;
    private setupApp;
    private fixMobileSize;
    private afterSetupApp;
    onSeek(time: number): Promise<void>;
    onReconnected(): Promise<void>;
    onRemoveScene(scenePath: string): Promise<void>;
    getAppInitState: (id: string) => AppInitState | undefined;
    emitAppSceneStateChange(sceneState: SceneState): void;
    emitAppIsWritableChange(): void;
    private makeAppEventListener;
    private appAttributesUpdateListener;
    private setFocusScenePathHandler;
    setScenePath(): void;
    setViewFocusScenePath(): string | undefined;
    private createView;
    notifyPageStateChange: import("lodash").DebouncedFunc<() => void>;
    get pageState(): PageState;
    removeSceneByIndex(index: number): Promise<boolean>;
    setSceneIndexWithoutSync(index: number): void;
    setSceneIndex(index: number): void;
    destroy(needCloseBox: boolean, cleanAttrs: boolean, skipUpdate: boolean, error?: Error): Promise<void>;
    close(): Promise<void>;
}
