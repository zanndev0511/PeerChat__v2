import type { AppContext } from "../AppContext";
import type { Diff, StorageStateChangedListener, StorageStateChangedListenerDisposer } from "./typings";
import { StorageEvent } from "./StorageEvent";
export * from './typings';
export declare const STORAGE_NS = "_WM-STORAGE_";
export declare class Storage<TState extends Record<string, any> = any> implements Storage<TState> {
    readonly id: string | null;
    private readonly _context;
    private readonly _sideEffect;
    private _state;
    private _destroyed;
    private _refMap;
    /**
     * `setState` alters local state immediately before sending to server. This will cache the old value for onStateChanged diffing.
     */
    private _lastValue;
    constructor(context: AppContext, id?: string, defaultState?: TState);
    get state(): Readonly<TState>;
    readonly onStateChanged: StorageEvent<Diff<TState>>;
    addStateChangedListener(handler: StorageStateChangedListener<TState>): StorageStateChangedListenerDisposer;
    ensureState(state: Partial<TState>): void;
    setState(state: Partial<TState>): void;
    /**
     * Empty storage data.
     */
    emptyStorage(): void;
    /**
     * Delete storage index with all of its data and destroy the Storage instance.
     */
    deleteStorage(): void;
    get destroyed(): boolean;
    /**
     * Destroy the Storage instance. The data will be kept.
     */
    destroy(): void;
    private _getRawState;
    private _setRawState;
    private _updateProperties;
}
