import type { StorageEventListener } from "./StorageEvent";
export declare type RefValue<TValue = any> = {
    k: string;
    v: TValue;
    __isRef: true;
};
export declare type ExtractRawValue<TValue> = TValue extends RefValue<infer TRefValue> ? TRefValue : TValue;
export declare type AutoRefValue<TValue> = RefValue<ExtractRawValue<TValue>>;
export declare type MaybeRefValue<TValue> = TValue | AutoRefValue<TValue>;
export declare type DiffOne<T> = {
    oldValue?: T;
    newValue?: T;
};
export declare type Diff<T> = {
    [K in keyof T]?: DiffOne<T[K]>;
};
export declare type StorageOnSetStatePayload<TState = unknown> = {
    [K in keyof TState]?: MaybeRefValue<TState[K]>;
};
export declare type StorageStateChangedEvent<TState = any> = Diff<TState>;
export declare type StorageStateChangedListener<TState = any> = StorageEventListener<StorageStateChangedEvent<TState>>;
export declare type StorageStateChangedListenerDisposer = () => void;
