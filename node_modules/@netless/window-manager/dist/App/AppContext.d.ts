import { Storage } from "./Storage";
import { autorun, listenDisposed, listenUpdated, reaction, unlistenDisposed, unlistenUpdated, toJS } from "white-web-sdk";
import type { Room, SceneDefinition, View } from "white-web-sdk";
import type { ReadonlyTeleBox } from "@netless/telebox-insider";
import type Emittery from "emittery";
import type { BoxManager } from "../BoxManager";
import type { AppEmitterEvent } from "../index";
import type { AppManager } from "../AppManager";
import type { AppProxy } from "./AppProxy";
import type { MagixEventAddListener, MagixEventDispatcher, MagixEventRemoveListener } from "./MagixEvent";
import type { AddPageParams, PageController, PageState } from "../Page";
export declare class AppContext<TAttributes extends {} = any, TMagixEventPayloads = any, TAppOptions = any> implements PageController {
    private manager;
    private boxManager;
    appId: string;
    private appProxy;
    private appOptions?;
    readonly emitter: Emittery<AppEmitterEvent<TAttributes>>;
    readonly mobxUtils: {
        autorun: typeof autorun;
        reaction: typeof reaction;
        toJS: typeof toJS;
    };
    readonly objectUtils: {
        listenUpdated: typeof listenUpdated;
        unlistenUpdated: typeof unlistenUpdated;
        listenDisposed: typeof listenDisposed;
        unlistenDisposed: typeof unlistenDisposed;
    };
    private store;
    readonly isAddApp: boolean;
    readonly isReplay: boolean;
    constructor(manager: AppManager, boxManager: BoxManager, appId: string, appProxy: AppProxy, appOptions?: TAppOptions | (() => TAppOptions) | undefined);
    getDisplayer: () => import("white-web-sdk").Displayer<import("white-web-sdk").DisplayerCallbacks>;
    /** @deprecated Use context.storage.state instead. */
    getAttributes: () => TAttributes | undefined;
    getScenes: () => SceneDefinition[] | undefined;
    getView: () => View | undefined;
    mountView: (dom: HTMLElement) => void;
    getInitScenePath: () => string | undefined;
    /** Get App writable status. */
    getIsWritable: () => boolean;
    /** Get the App Window UI box. */
    getBox: () => ReadonlyTeleBox;
    getRoom: () => Room | undefined;
    /** @deprecated Use context.storage.setState instead. */
    setAttributes: (attributes: TAttributes) => void;
    /** @deprecated Use context.storage.setState instead. */
    updateAttributes: (keys: string[], value: any) => void;
    setScenePath: (scenePath: string) => Promise<void>;
    /** Get the local App options. */
    getAppOptions: () => TAppOptions | undefined;
    private _storage?;
    /** Main Storage for attributes. */
    get storage(): Storage<TAttributes>;
    /**
     * Create separated storages for flexible state management.
     * @param storeId Namespace for the storage. Storages of the same namespace share the same data.
     * @param defaultState Default state for initial storage creation.
     * @returns
     */
    createStorage: <TState extends {}>(storeId: string, defaultState?: TState | undefined) => Storage<TState>;
    /** Dispatch events to other clients (and self). */
    dispatchMagixEvent: MagixEventDispatcher<TMagixEventPayloads>;
    /** Listen to events from others clients (and self messages). */
    addMagixEventListener: MagixEventAddListener<TMagixEventPayloads>;
    /** Remove a Magix event listener. */
    removeMagixEventListener: MagixEventRemoveListener<TMagixEventPayloads>;
    /** PageController  */
    nextPage: () => Promise<boolean>;
    jumpPage: (index: number) => Promise<boolean>;
    prevPage: () => Promise<boolean>;
    addPage: (params?: AddPageParams | undefined) => Promise<void>;
    removePage: (index?: number | undefined) => Promise<boolean>;
    get pageState(): PageState;
    get kind(): string;
    /** Dispatch a local event to `manager.onAppEvent()`. */
    dispatchAppEvent(type: string, value?: any): void;
}
