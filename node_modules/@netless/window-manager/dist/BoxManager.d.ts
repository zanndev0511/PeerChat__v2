import { AppAttributes } from "./constants";
import { TELE_BOX_STATE, TeleBoxManager } from "@netless/telebox-insider";
import { WindowManager } from "./index";
import type { BoxEmitterType } from "./BoxEmitter";
import type { AddAppOptions, AppInitState } from "./index";
import type { TeleBoxManagerUpdateConfig, ReadonlyTeleBox, TeleBoxColorScheme, TeleBoxRect, TeleBoxConfig } from "@netless/telebox-insider";
import type Emittery from "emittery";
import type { NetlessApp } from "./typings";
import type { View } from "white-web-sdk";
import type { CallbacksType } from "./callback";
import type { EmitterType } from "./InternalEmitter";
export { TELE_BOX_STATE };
export declare type CreateBoxParams = {
    appId: string;
    app: NetlessApp;
    view?: View;
    emitter?: Emittery;
    options?: AddAppOptions;
    canOperate?: boolean;
    smartPosition?: boolean;
};
declare type AppId = {
    appId: string;
};
declare type MoveBoxParams = AppId & {
    x: number;
    y: number;
};
declare type ResizeBoxParams = AppId & {
    width: number;
    height: number;
    skipUpdate: boolean;
};
declare type SetBoxMinSizeParams = AppId & {
    minWidth: number;
    minHeight: number;
};
declare type SetBoxTitleParams = AppId & {
    title: string;
};
export declare type CreateTeleBoxManagerConfig = {
    collectorContainer?: HTMLElement;
    collectorStyles?: Partial<CSSStyleDeclaration>;
    prefersColorScheme?: TeleBoxColorScheme;
};
export declare type BoxManagerContext = {
    safeSetAttributes: (attributes: any) => void;
    getMainView: () => View;
    updateAppState: (appId: string, field: AppAttributes, value: any) => void;
    emitter: EmitterType;
    boxEmitter: BoxEmitterType;
    callbacks: CallbacksType;
    canOperate: () => boolean;
    notifyContainerRectUpdate: (rect: TeleBoxRect) => void;
    cleanFocus: () => void;
    setAppFocus: (appId: string) => void;
};
export declare const createBoxManager: (manager: WindowManager, callbacks: CallbacksType, emitter: EmitterType, boxEmitter: BoxEmitterType, options: CreateTeleBoxManagerConfig) => BoxManager;
export declare class BoxManager {
    private context;
    private createTeleBoxManagerConfig?;
    teleBoxManager: TeleBoxManager;
    constructor(context: BoxManagerContext, createTeleBoxManagerConfig?: CreateTeleBoxManagerConfig | undefined);
    private get mainView();
    private get canOperate();
    get boxState(): "normal" | "minimized" | "maximized";
    get maximized(): boolean;
    get minimized(): boolean;
    get darkMode(): boolean;
    get prefersColorScheme(): TeleBoxColorScheme;
    get boxSize(): number;
    createBox(params: CreateBoxParams): void;
    setBoxInitState(appId: string): void;
    setupBoxManager(createTeleBoxManagerConfig?: CreateTeleBoxManagerConfig): TeleBoxManager;
    setCollectorContainer(container: HTMLElement): void;
    getBox(appId: string): ReadonlyTeleBox | undefined;
    closeBox(appId: string, skipUpdate?: boolean): ReadonlyTeleBox | undefined;
    boxIsFocus(appId: string): boolean | undefined;
    getFocusBox(): ReadonlyTeleBox | undefined;
    getTopBox(): ReadonlyTeleBox | undefined;
    updateBoxState(state?: AppInitState): void;
    updateManagerRect(): void;
    moveBox({ appId, x, y }: MoveBoxParams): void;
    focusBox({ appId }: AppId, skipUpdate?: boolean): void;
    resizeBox({ appId, width, height, skipUpdate }: ResizeBoxParams): void;
    setBoxMinSize(params: SetBoxMinSizeParams): void;
    setBoxTitle(params: SetBoxTitleParams): void;
    blurAllBox(): void;
    updateAll(config: TeleBoxManagerUpdateConfig): void;
    setMaximized(maximized: boolean, skipUpdate?: boolean): void;
    setMinimized(minimized: boolean, skipUpdate?: boolean): void;
    focusTopBox(): void;
    updateBox(id: string, payload: TeleBoxConfig, skipUpdate?: boolean): void;
    setReadonly(readonly: boolean): void;
    setPrefersColorScheme(colorScheme: TeleBoxColorScheme): void;
    setZIndex(id: string, zIndex: number, skipUpdate?: boolean): void;
    destroy(): void;
}
