import { AppManager } from "./AppManager";
import { CursorManager } from "./Cursor";
import { InvisiblePlugin, ViewMode } from "white-web-sdk";
import { ReconnectRefresher } from "./ReconnectRefresher";
import "video.js/dist/video-js.css";
import "./style.css";
import "@netless/telebox-insider/dist/style.css";
import type { TELE_BOX_STATE } from "./BoxManager";
import type { Apps, Position } from "./AttributesDelegate";
import type { Displayer, SceneDefinition, View, Room, InvisiblePluginContext, Camera, AnimationMode, CameraBound, Point, Rectangle, CameraState, Player, ImageInformation, SceneState } from "white-web-sdk";
import type { AppListeners } from "./AppListener";
import type { ApplianceIcons, NetlessApp, RegisterParams } from "./typings";
import type { TeleBoxColorScheme, TeleBoxState } from "@netless/telebox-insider";
import type { AppProxy } from "./App";
import type { PublicEvent } from "./callback";
import type Emittery from "emittery";
import type { PageController, AddPageParams, PageState } from "./Page";
import { IframeBridge } from "./View/IframeBridge";
export * from "./View/IframeBridge";
export declare type WindowMangerAttributes = {
    modelValue?: string;
    boxState: TELE_BOX_STATE;
    maximized?: boolean;
    minimized?: boolean;
    [key: string]: any;
};
export declare type apps = {
    [key: string]: NetlessApp;
};
export declare type AddAppOptions = {
    scenePath?: string;
    title?: string;
    scenes?: SceneDefinition[];
};
export declare type setAppOptions = AddAppOptions & {
    appOptions?: any;
};
export declare type AddAppParams<TAttributes = any> = {
    kind: string;
    src?: string;
    options?: AddAppOptions;
    attributes?: TAttributes;
};
export declare type BaseInsertParams = {
    kind: string;
    src?: string;
    options?: AddAppOptions;
    attributes?: any;
    isDynamicPPT?: boolean;
};
export declare type AppSyncAttributes = {
    kind: string;
    src?: string;
    options: any;
    state?: any;
    isDynamicPPT?: boolean;
    fullPath?: string;
    createdAt?: number;
};
export declare type AppInitState = {
    id: string;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    focus?: boolean;
    maximized?: boolean;
    minimized?: boolean;
    sceneIndex?: number;
    boxState?: TeleBoxState;
    zIndex?: number;
};
export declare type CursorMovePayload = {
    uid: string;
    state?: "leave";
    position: Position;
};
export declare type MountParams = {
    room: Room | Player;
    container?: HTMLElement;
    /** 白板高宽比例, 默认为 9 / 16 */
    containerSizeRatio?: number;
    /** @deprecated 显示 PS 透明背景，默认 true */
    chessboard?: boolean;
    collectorContainer?: HTMLElement;
    collectorStyles?: Partial<CSSStyleDeclaration>;
    overwriteStyles?: string;
    cursor?: boolean;
    debug?: boolean;
    disableCameraTransform?: boolean;
    prefersColorScheme?: TeleBoxColorScheme;
    applianceIcons?: ApplianceIcons;
    fullscreen?: boolean;
};
export declare const reconnectRefresher: ReconnectRefresher;
export declare class WindowManager extends InvisiblePlugin<WindowMangerAttributes, any> implements PageController {
    static kind: string;
    static displayer: Displayer;
    static wrapper?: HTMLElement;
    static sizer?: HTMLElement;
    static playground?: HTMLElement;
    static container?: HTMLElement;
    static debug: boolean;
    static containerSizeRatio: number;
    private static isCreated;
    version: string;
    dependencies: Record<string, string>;
    appListeners?: AppListeners;
    readonly?: boolean;
    emitter: Emittery<PublicEvent>;
    appManager?: AppManager;
    cursorManager?: CursorManager;
    viewMode: ViewMode;
    isReplay: boolean;
    private _pageState?;
    private _fullscreen?;
    private boxManager?;
    private static params?;
    private containerResizeObserver?;
    containerSizeRatio: number;
    constructor(context: InvisiblePluginContext);
    static mount(params: MountParams): Promise<WindowManager>;
    private static initManager;
    private static initContainer;
    static get registered(): Map<string, RegisterParams<any, any, any>>;
    bindContainer(container: HTMLElement): void;
    bindCollectorContainer(container: HTMLElement): void;
    /**
     * 注册插件
     */
    static register(params: RegisterParams<any, any, any>): Promise<void>;
    /**
     * 注销插件
     */
    static unregister(kind: string): void;
    /**
     * 创建一个 app 至白板
     */
    addApp<T = any>(params: AddAppParams<T>): Promise<string | undefined>;
    private _addApp;
    private setupScenePath;
    /**
     * 设置 mainView 的 ScenePath, 并且切换白板为可写状态
     */
    setMainViewScenePath(scenePath: string): Promise<void>;
    /**
     * 设置 mainView 的 SceneIndex, 并且切换白板为可写状态
     */
    setMainViewSceneIndex(index: number): Promise<void>;
    nextPage(): Promise<boolean>;
    prevPage(): Promise<boolean>;
    jumpPage(index: number): Promise<boolean>;
    addPage(params?: AddPageParams): Promise<void>;
    /**
     * 删除一页
     * 默认删除当前页, 可以删除指定 index 页
     * 最低保留一页
     */
    removePage(index?: number): Promise<boolean>;
    /**
     * 返回 mainView 的 ScenePath
     */
    getMainViewScenePath(): string | undefined;
    /**
     * 返回 mainView 的 SceneIndex
     */
    getMainViewSceneIndex(): number;
    /**
     * 设置所有 app 的 readonly 模式
     */
    setReadonly(readonly: boolean): void;
    /**
     * 切换 mainView 为可写
     */
    switchMainViewToWriter(): Promise<void> | undefined;
    /**
     * app destroy 回调
     */
    onAppDestroy(kind: string, listener: (error: Error) => void): void;
    /**
     * app 本地自定义事件回调
     *
     * 返回一个用于撤销此监听的函数
     */
    onAppEvent(kind: string, listener: (args: {
        kind: string;
        appId: string;
        type: string;
        value: any;
    }) => void): () => void;
    /**
     * 设置 ViewMode
     */
    setViewMode(mode: ViewMode): void;
    setBoxState(boxState: TeleBoxState): void;
    setMaximized(maximized: boolean): void;
    setMinimized(minimized: boolean): void;
    setFullscreen(fullscreen: boolean): void;
    get mainView(): View;
    get camera(): Camera;
    get cameraState(): CameraState;
    get apps(): Apps | undefined;
    get boxState(): TeleBoxState | undefined;
    get darkMode(): boolean;
    get prefersColorScheme(): TeleBoxColorScheme | undefined;
    get focused(): string | undefined;
    get focusedView(): View | undefined;
    get mainViewSceneIndex(): number;
    get mainViewSceneDir(): string;
    get topApp(): string | undefined;
    get mainViewScenesLength(): number;
    get canRedoSteps(): number;
    get canUndoSteps(): number;
    get sceneState(): SceneState;
    get pageState(): PageState;
    get fullscreen(): boolean;
    /**
     * 查询所有的 App
     */
    queryAll(): AppProxy[];
    /**
     * 查询单个 App
     */
    queryOne(appId: string): AppProxy | undefined;
    /**
     * 关闭 APP
     */
    closeApp(appId: string): Promise<void>;
    /**
     * 切换 focus 到指定的 app, 并且把这个 app 放到最前面
     */
    focusApp(appId: string): void;
    moveCamera(camera: Partial<Camera> & {
        animationMode?: AnimationMode | undefined;
    }): void;
    moveCameraToContain(rectangle: Rectangle & Readonly<{
        animationMode?: AnimationMode;
    }>): void;
    convertToPointInWorld(point: Point): Point;
    setCameraBound(cameraBound: CameraBound): void;
    onDestroy(): void;
    destroy(): void;
    private _destroy;
    private bindMainView;
    get canOperate(): boolean;
    get room(): Room;
    safeSetAttributes(attributes: any): void;
    safeUpdateAttributes(keys: string[], value: any): void;
    setPrefersColorScheme(scheme: TeleBoxColorScheme): void;
    cleanCurrentScene(): void;
    redo(): number;
    undo(): number;
    delete(): void;
    copy(): void;
    paste(): void;
    duplicate(): void;
    insertText(x: number, y: number, text: string | undefined): string;
    insertImage(info: ImageInformation): void;
    completeImageUpload(uuid: string, url: string): void;
    lockImage(uuid: string, locked: boolean): void;
    lockImages(locked: boolean): void;
    refresh(): void;
    /** @inner */
    _refresh(): void;
    setContainerSizeRatio(ratio: number): void;
    private isDynamicPPT;
    private ensureAttributes;
    private _iframeBridge?;
    getIframeBridge(): IframeBridge;
}
export * from "./typings";
export { BuiltinApps } from "./BuiltinApps";
export type { PublicEvent } from "./callback";
