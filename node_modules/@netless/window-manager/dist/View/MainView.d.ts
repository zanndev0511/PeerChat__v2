import { ViewMode } from "white-web-sdk";
import type { Camera, Size, View } from "white-web-sdk";
import type { AppManager } from "../AppManager";
export declare class MainViewProxy {
    private manager;
    private scale?;
    private started;
    private mainViewIsAddListener;
    private mainView;
    private store;
    private viewMode;
    private sideEffectManager;
    constructor(manager: AppManager);
    private startListenWritableChange;
    ensureCameraAndSize(): void;
    private get mainViewCamera();
    private get mainViewSize();
    private get didRelease();
    private moveCameraSizeByAttributes;
    start(): void;
    addCameraReaction: () => void;
    setCameraAndSize(): void;
    private cameraReaction;
    sizeChangeHandler: import("lodash").DebouncedFunc<(size: Size) => void>;
    onUpdateContainerSizeRatio: () => void;
    get view(): View;
    get cameraState(): {
        width: number;
        height: number;
        centerX: number;
        centerY: number;
        scale: number;
    };
    createMainView(): View;
    onReconnect(): void;
    setFocusScenePath(path: string | undefined): View | undefined;
    rebind(): void;
    private onCameraUpdatedByDevice;
    addMainViewListener(): void;
    removeMainViewListener(): void;
    private mainViewClickListener;
    mainViewClickHandler(): Promise<void>;
    setMainViewSize: import("lodash").DebouncedFunc<(size: any) => void>;
    private addCameraListener;
    private removeCameraListener;
    private _syncMainViewTimer;
    private onCameraOrSizeUpdated;
    private syncMainView;
    moveCameraToContian(size: Size): void;
    moveCamera(camera: Camera): void;
    stop(): void;
    setViewMode: (mode: ViewMode) => void;
    destroy(): void;
}
