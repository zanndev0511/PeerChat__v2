import type { Displayer } from "white-web-sdk";
import type { AppManager } from "../AppManager";
import type { WindowManager } from "../index";
import Emittery from "emittery";
import { AnimationMode } from "white-web-sdk";
export declare enum IframeEvents {
    Init = "Init",
    AttributesUpdate = "AttributesUpdate",
    SetAttributes = "SetAttributes",
    RegisterMagixEvent = "RegisterMagixEvent",
    RemoveMagixEvent = "RemoveMagixEvent",
    RemoveAllMagixEvent = "RemoveAllMagixEvent",
    RoomStateChanged = "RoomStateChanged",
    DispatchMagixEvent = "DispatchMagixEvent",
    ReciveMagixEvent = "ReciveMagixEvent",
    NextPage = "NextPage",
    PrevPage = "PrevPage",
    SDKCreate = "SDKCreate",
    OnCreate = "OnCreate",
    SetPage = "SetPage",
    GetAttributes = "GetAttributes",
    Ready = "Ready",
    Destory = "Destory",
    StartCreate = "StartCreate",
    WrapperDidUpdate = "WrapperDidUpdate",
    DispayIframe = "DispayIframe",
    HideIframe = "HideIframe",
    GetRootRect = "GetRootRect",
    ReplayRootRect = "ReplayRootRect",
    PageTo = "PageTo"
}
export declare enum DomEvents {
    WrapperDidMount = "WrapperDidMount",
    IframeLoad = "IframeLoad"
}
export declare type IframeBridgeAttributes = {
    readonly url: string;
    readonly width: number;
    readonly height: number;
    readonly displaySceneDir: string;
    readonly lastEvent?: {
        name: string;
        payload: any;
    };
    readonly useClicker?: boolean;
    readonly useSelector?: boolean;
};
export declare type IframeBridgeEvents = {
    created: undefined;
    [IframeEvents.Ready]: undefined;
    [IframeEvents.StartCreate]: undefined;
    [IframeEvents.OnCreate]: IframeBridge;
    [IframeEvents.Destory]: undefined;
    [IframeEvents.GetRootRect]: undefined;
    [IframeEvents.ReplayRootRect]: DOMRect;
    [DomEvents.WrapperDidMount]: undefined;
    [IframeEvents.WrapperDidUpdate]: undefined;
    [DomEvents.IframeLoad]: Event;
    [IframeEvents.HideIframe]: undefined;
    [IframeEvents.DispayIframe]: undefined;
};
export declare type IframeSize = {
    readonly width: number;
    readonly height: number;
};
declare type BaseOption = {
    readonly url: string;
    readonly width: number;
    readonly height: number;
    readonly displaySceneDir: string;
};
export declare type InsertOptions = {
    readonly useClicker?: boolean;
    readonly useSelector?: boolean;
} & BaseOption;
export declare type OnCreateInsertOption = {
    readonly displayer: Displayer;
} & BaseOption;
/**
 * {@link https://github.com/netless-io/netless-iframe-bridge @netless/iframe-bridge}
 */
export declare class IframeBridge {
    readonly manager: WindowManager;
    readonly appManager: AppManager;
    static readonly kind = "IframeBridge";
    static readonly hiddenClass = "netless-iframe-brdige-hidden";
    static emitter: Emittery<IframeBridgeEvents>;
    private static displayer;
    private static alreadyCreate;
    displayer: Displayer;
    iframe: HTMLIFrameElement;
    private readonly magixEventMap;
    private cssList;
    private allowAppliances;
    private bridgeDisposer;
    private rootRect;
    private sideEffectManager;
    constructor(manager: WindowManager, appManager: AppManager);
    static onCreate(plugin: IframeBridge): void;
    insert(options: InsertOptions): this;
    private getComputedIframeStyle;
    destroy(): void;
    private getIframe;
    setIframeSize(params: IframeSize): void;
    get attributes(): Partial<IframeBridgeAttributes>;
    setAttributes(data: Partial<IframeBridgeAttributes>): void;
    private _createIframe;
    scaleIframeToFit(animationMode?: AnimationMode): void;
    get isReplay(): boolean;
    private handleSetPage;
    private execListenIframe;
    private src_url_equal_anchor?;
    private listenIframe;
    private onPhaseChangedListener;
    private listenDisplayerState;
    private computedStyleAndIframeDisplay;
    private listenDisplayerCallbacks;
    private get callbackName();
    private stateChangeListener;
    private computedStyle;
    private computedIframeDisplay;
    computedZindex(): void;
    private updateStyle;
    private get iframeOrigin();
    private messageListener;
    private handleSDKCreate;
    private handleDispatchMagixEvent;
    private handleSetAttributes;
    private handleRegisterMagixEvent;
    private handleRemoveMagixEvent;
    private handleNextPage;
    private handlePrevPage;
    private handlePageTo;
    private handleRemoveAllMagixEvent;
    private handleGetAttributes;
    postMessage(message: any): void;
    dispatchMagixEvent(event: string, payload: any): void;
    private get currentIndex();
    private get currentPage();
    private get totalPage();
    private get readonly();
    get inDisplaySceneDir(): boolean;
    private isClicker;
    private get isDisableInput();
}
export {};
