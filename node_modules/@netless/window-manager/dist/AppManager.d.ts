import { AppStatus, Events } from "./constants";
import { AppProxy } from "./App";
import { MainViewProxy } from "./View/MainView";
import { WindowManager } from "./index";
import { ViewManager } from "./View/ViewManager";
import type { ReconnectRefresher } from "./ReconnectRefresher";
import type { BoxManager } from "./BoxManager";
import type { Displayer, Room, SceneState } from "white-web-sdk";
import type { AddAppParams, TeleBoxRect } from "./index";
export declare class AppManager {
    windowManger: WindowManager;
    displayer: Displayer;
    viewManager: ViewManager;
    appProxies: Map<string, AppProxy>;
    appStatus: Map<string, AppStatus>;
    store: import("./AttributesDelegate").AttributesDelegate;
    mainViewProxy: MainViewProxy;
    refresher?: ReconnectRefresher;
    isReplay: boolean;
    mainViewScenesLength: number;
    private appListeners;
    boxManager?: BoxManager;
    private _prevSceneIndex;
    private _prevFocused;
    private callbacksNode;
    private appCreateQueue;
    private sideEffectManager;
    sceneState: SceneState | null;
    rootDirRemoving: boolean;
    constructor(windowManger: WindowManager);
    private onRemoveScenes;
    /**
     * 根目录被删除时所有的 scene 都会被删除.
     * 所以需要关掉所有开启了 view 的 app
     */
    onRootDirRemoved(needClose?: boolean): Promise<void>;
    private onReadonlyChanged;
    private onPlayerSeekStart;
    private onPlayerSeekDone;
    createRootDirScenesCallback: () => void;
    removeSceneByIndex: (index: number) => Promise<boolean>;
    setSceneIndexWithoutSync: (index: number) => void;
    private onSceneChange;
    private emitMainViewScenesChange;
    private updateSceneState;
    private get eventName();
    get attributes(): import("./index").WindowMangerAttributes;
    get canOperate(): boolean;
    get room(): Room | undefined;
    get mainView(): import("white-web-sdk").View;
    get focusApp(): AppProxy | undefined;
    get uid(): string;
    getMainViewSceneDir(): string;
    private onCreated;
    private onBoxMove;
    private onBoxResize;
    private onBoxFocus;
    private onBoxClose;
    private onBoxStateChange;
    addAppsChangeListener: () => void;
    addAppCloseListener: () => void;
    private onMainViewIndexChange;
    private onFocusChange;
    attributesUpdateCallback: import("lodash").DebouncedFunc<(apps: any) => Promise<void>>;
    private _appIds;
    notifyAppsChange(appIds: string[]): void;
    /**
     * 插件更新 attributes 时的回调
     *
     * @param {*} attributes
     * @memberof WindowManager
     */
    _attributesUpdateCallback(apps: any): Promise<void>;
    private onRegisteredChange;
    private onMinimized;
    refresh(): void;
    setBoxManager(boxManager: BoxManager): void;
    resetMaximized(): void;
    resetMinimized(): void;
    private onAppDelete;
    private closeAll;
    bindMainView(divElement: HTMLDivElement, disableCameraTransform: boolean): void;
    setMainViewFocusPath(scenePath?: string): boolean | undefined;
    private resetScenePath;
    addApp(params: AddAppParams, isDynamicPPT: boolean): Promise<string | undefined>;
    private beforeAddApp;
    private afterAddApp;
    closeApp(appId: string, needClose?: boolean): Promise<void>;
    private baseInsertApp;
    private displayerStateListener;
    displayerWritableListener: (isReadonly: boolean) => void;
    safeSetAttributes(attributes: any): void;
    safeUpdateAttributes(keys: string[], value: any): void;
    setMainViewScenePath(scenePath: string): Promise<void>;
    private _setMainViewScenePath;
    private updateSceneIndex;
    setMainViewSceneIndex(index: number): Promise<void>;
    private dispatchSetMainViewScenePath;
    getAppInitPath(appId: string): string | undefined;
    safeDispatchMagixEvent(event: string, payload: any): void;
    focusByAttributes(apps: any): void;
    onReconnected(): Promise<void>;
    notifyContainerRectUpdate(rect: TeleBoxRect): void;
    updateRootDirRemoving: (removing: boolean) => void;
    dispatchInternalEvent(event: Events, payload?: any): void;
    destroy(): void;
}
